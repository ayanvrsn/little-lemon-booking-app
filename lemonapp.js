import React, { useState, useEffect } from 'react';
import { Calendar, Clock, Users, Phone, Mail, MapPin, Star, ChefHat, Utensils } from 'lucide-react';

const LittleLemonApp = () => {
  const [bookingData, setBookingData] = useState({
    date: '',
    time: '',
    guests: '2',
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    occasion: '',
    requests: ''
  });
  
  const [errors, setErrors] = useState({});
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [availableTimes, setAvailableTimes] = useState([]);

  // Available time slots
  const timeSlots = [
    '17:00', '17:30', '18:00', '18:30', '19:00', 
    '19:30', '20:00', '20:30', '21:00', '21:30', '22:00'
  ];

  // Initialize available times based on date
  const initializeTimes = (selectedDate) => {
    // Simulate different availability based on date
    const day = new Date(selectedDate).getDay();
    const baseSlots = [...timeSlots];
    
    // Weekend - remove some slots to simulate higher demand
    if (day === 5 || day === 6) {
      return baseSlots.filter(time => Math.random() > 0.3);
    }
    
    return baseSlots;
  };

  useEffect(() => {
    if (bookingData.date) {
      setAvailableTimes(initializeTimes(bookingData.date));
    }
  }, [bookingData.date]);

  // Validation functions
  const validateForm = () => {
    const newErrors = {};
    
    if (!bookingData.date) {
      newErrors.date = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è';
    } else {
      const selectedDate = new Date(bookingData.date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      if (selectedDate < today) {
        newErrors.date = '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º';
      }
    }
    
    if (!bookingData.time) {
      newErrors.time = '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è';
    }
    
    if (!bookingData.firstName.trim()) {
      newErrors.firstName = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è';
    }
    
    if (!bookingData.lastName.trim()) {
      newErrors.lastName = '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é';
    }
    
    if (!bookingData.email) {
      newErrors.email = '–í–≤–µ–¥–∏—Ç–µ email';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(bookingData.email)) {
      newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    }
    
    if (!bookingData.phone) {
      newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω';
    } else if (!/^\+?[\d\s\-\(\)]+$/.test(bookingData.phone)) {
      newErrors.phone = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (field, value) => {
    setBookingData(prev => ({ ...prev, [field]: value }));
    
    // Clear error for this field when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validateForm()) {
      setIsSubmitted(true);
      // Here you would normally send data to backend
      console.log('Booking submitted:', bookingData);
    }
  };

  const resetForm = () => {
    setBookingData({
      date: '',
      time: '',
      guests: '2',
      firstName: '',
      lastName: '',
      email: '',
      phone: '',
      occasion: '',
      requests: ''
    });
    setErrors({});
    setIsSubmitted(false);
    setAvailableTimes([]);
  };

  // Success component
  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-yellow-50 to-green-50">
        <div className="container mx-auto px-4 py-8">
          <div className="max-w-md mx-auto bg-white rounded-lg shadow-lg p-8 text-center">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Star className="w-8 h-8 text-green-600" />
            </div>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">
              –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!
            </h2>
            <p className="text-gray-600 mb-6">
              –°–ø–∞—Å–∏–±–æ, {bookingData.firstName}! –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ {bookingData.email}
            </p>
            <div className="bg-gray-50 rounded-lg p-4 mb-6 text-left">
              <h3 className="font-semibold text-gray-800 mb-2">–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
              <p className="text-sm text-gray-600">üìÖ {bookingData.date}</p>
              <p className="text-sm text-gray-600">üïê {bookingData.time}</p>
              <p className="text-sm text-gray-600">üë• {bookingData.guests} –≥–æ—Å—Ç–µ–π</p>
            </div>
            <button
              onClick={resetForm}
              className="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-2 rounded-lg font-medium transition-colors"
            >
              –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-yellow-50 to-green-50">
      {/* Header */}
      <header className="bg-green-700 text-white shadow-lg">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <ChefHat className="w-8 h-8 text-yellow-400" />
              <h1 className="text-2xl md:text-3xl font-bold">Little Lemon</h1>
            </div>
            <div className="hidden md:flex items-center space-x-6 text-sm">
              <div className="flex items-center space-x-2">
                <MapPin className="w-4 h-4" />
                <span>–ß–∏–∫–∞–≥–æ</span>
              </div>
              <div className="flex items-center space-x-2">
                <Phone className="w-4 h-4" />
                <span>+1 (555) 123-4567</span>
              </div>
            </div>
          </div>
          <p className="text-yellow-200 mt-2">
            –°–µ–º–µ–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–π –∫—É—Ö–Ω–∏
          </p>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Hero Section */}
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-800 mb-4">
              –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å—Ç–æ–ª–∏–∫
            </h2>
            <p className="text-gray-600 text-lg">
              –ù–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º —É–∂–∏–Ω–æ–º –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
            </p>
          </div>

          <div className="grid lg:grid-cols-2 gap-8">
            {/* Restaurant Info */}
            <div className="space-y-6">
              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                  <Utensils className="w-5 h-5 mr-2 text-green-600" />
                  –û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
                </h3>
                <p className="text-gray-600 mb-4">
                  Little Lemon ‚Äî —ç—Ç–æ —Å–µ–º–µ–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –≥–¥–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–π –∫—É—Ö–Ω–∏ 
                  –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏. –ú—ã –≥–æ—Ä–¥–∏–º—Å—è –Ω–∞—à–∏–º–∏ 
                  —Å–≤–µ–∂–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏.
                </p>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <p className="font-medium text-gray-700">–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</p>
                    <p className="text-gray-600">–ü–Ω-–ß—Ç: 17:00-23:00</p>
                    <p className="text-gray-600">–ü—Ç-–°–±: 17:00-24:00</p>
                    <p className="text-gray-600">–í—Å: 17:00-22:00</p>
                  </div>
                  <div>
                    <p className="font-medium text-gray-700">–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</p>
                    <p className="text-gray-600">‚Ä¢ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–∞—è –∫—É—Ö–Ω—è</p>
                    <p className="text-gray-600">‚Ä¢ –°–≤–µ–∂–∏–µ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã</p>
                    <p className="text-gray-600">‚Ä¢ –í–µ–≥–∞–Ω—Å–∫–∏–µ –æ–ø—Ü–∏–∏</p>
                  </div>
                </div>
              </div>

              {/* Reviews */}
              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-xl font-semibold text-gray-800 mb-4">–û—Ç–∑—ã–≤—ã –≥–æ—Å—Ç–µ–π</h3>
                <div className="space-y-4">
                  <div className="border-l-4 border-yellow-400 pl-4">
                    <div className="flex items-center mb-2">
                      <div className="flex text-yellow-400">
                        {[...Array(5)].map((_, i) => (
                          <Star key={i} className="w-4 h-4 fill-current" />
                        ))}
                      </div>
                    </div>
                    <p className="text-gray-600 text-sm">
                      "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–∞—è –µ–¥–∞! –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω–µ–º—Å—è."
                    </p>
                    <p className="text-gray-500 text-xs mt-1">‚Äî –ê–Ω–Ω–∞ –ö.</p>
                  </div>
                  <div className="border-l-4 border-yellow-400 pl-4">
                    <div className="flex items-center mb-2">
                      <div className="flex text-yellow-400">
                        {[...Array(5)].map((_, i) => (
                          <Star key={i} className="w-4 h-4 fill-current" />
                        ))}
                      </div>
                    </div>
                    <p className="text-gray-600 text-sm">
                      "–õ—É—á—à–∏–π –≥—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç –≤ –≥–æ—Ä–æ–¥–µ! –ü–µ—Ä—Å–æ–Ω–∞–ª –æ—á–µ–Ω—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π."
                    </p>
                    <p className="text-gray-500 text-xs mt-1">‚Äî –ú–∏—Ö–∞–∏–ª –í.</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Booking Form */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h3 className="text-xl font-semibold text-gray-800 mb-6">
                –§–æ—Ä–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
              </h3>
              
              <div className="space-y-4">
                {/* Date and Time */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="date" className="block text-sm font-medium text-gray-700 mb-1">
                      <Calendar className="w-4 h-4 inline mr-1" />
                      –î–∞—Ç–∞ *
                    </label>
                    <input
                      type="date"
                      id="date"
                      value={bookingData.date}
                      onChange={(e) => handleInputChange('date', e.target.value)}
                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                        errors.date ? 'border-red-500' : 'border-gray-300'
                      }`}
                      aria-describedby={errors.date ? 'date-error' : undefined}
                      aria-invalid={!!errors.date}
                    />
                    {errors.date && (
                      <p id="date-error" className="text-red-500 text-xs mt-1" role="alert">
                        {errors.date}
                      </p>
                    )}
                  </div>
                  
                  <div>
                    <label htmlFor="time" className="block text-sm font-medium text-gray-700 mb-1">
                      <Clock className="w-4 h-4 inline mr-1" />
                      –í—Ä–µ–º—è *
                    </label>
                    <select
                      id="time"
                      value={bookingData.time}
                      onChange={(e) => handleInputChange('time', e.target.value)}
                      disabled={!availableTimes.length}
                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                        errors.time ? 'border-red-500' : 'border-gray-300'
                      } ${!availableTimes.length ? 'bg-gray-100 cursor-not-allowed' : ''}`}
                      aria-describedby={errors.time ? 'time-error' : undefined}
                      aria-invalid={!!errors.time}
                    >
                      <option value="">
                        {availableTimes.length ? '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è' : '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'}
                      </option>
                      {availableTimes.map(time => (
                        <option key={time} value={time}>{time}</option>
                      ))}
                    </select>
                    {errors.time && (
                      <p id="time-error" className="text-red-500 text-xs mt-1" role="alert">
                        {errors.time}
                      </p>
                    )}
                  </div>
                </div>

                {/* Guests */}
                <div>
                  <label htmlFor="guests" className="block text-sm font-medium text-gray-700 mb-1">
                    <Users className="w-4 h-4 inline mr-1" />
                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π *
                  </label>
                  <select
                    id="guests"
                    value={bookingData.guests}
                    onChange={(e) => handleInputChange('guests', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  >
                    {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(num => (
                      <option key={num} value={num}>{num} {num === 1 ? '–≥–æ—Å—Ç—å' : num < 5 ? '–≥–æ—Å—Ç—è' : '–≥–æ—Å—Ç–µ–π'}</option>
                    ))}
                  </select>
                </div>

                {/* Personal Information */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-1">
                      –ò–º—è *
                    </label>
                    <input
                      type="text"
                      id="firstName"
                      value={bookingData.firstName}
                      onChange={(e) => handleInputChange('firstName', e.target.value)}
                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                        errors.firstName ? 'border-red-500' : 'border-gray-300'
                      }`}
                      aria-describedby={errors.firstName ? 'firstName-error' : undefined}
                      aria-invalid={!!errors.firstName}
                    />
                    {errors.firstName && (
                      <p id="firstName-error" className="text-red-500 text-xs mt-1" role="alert">
                        {errors.firstName}
                      </p>
                    )}
                  </div>
                  
                  <div>
                    <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-1">
                      –§–∞–º–∏–ª–∏—è *
                    </label>
                    <input
                      type="text"
                      id="lastName"
                      value={bookingData.lastName}
                      onChange={(e) => handleInputChange('lastName', e.target.value)}
                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                        errors.lastName ? 'border-red-500' : 'border-gray-300'
                      }`}
                      aria-describedby={errors.lastName ? 'lastName-error' : undefined}
                      aria-invalid={!!errors.lastName}
                    />
                    {errors.lastName && (
                      <p id="lastName-error" className="text-red-500 text-xs mt-1" role="alert">
                        {errors.lastName}
                      </p>
                    )}
                  </div>
                </div>

                {/* Contact Information */}
                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                    <Mail className="w-4 h-4 inline mr-1" />
                    Email *
                  </label>
                  <input
                    type="email"
                    id="email"
                    value={bookingData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                      errors.email ? 'border-red-500' : 'border-gray-300'
                    }`}
                    aria-describedby={errors.email ? 'email-error' : undefined}
                    aria-invalid={!!errors.email}
                  />
                  {errors.email && (
                    <p id="email-error" className="text-red-500 text-xs mt-1" role="alert">
                      {errors.email}
                    </p>
                  )}
                </div>

                <div>
                  <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
                    <Phone className="w-4 h-4 inline mr-1" />
                    –¢–µ–ª–µ—Ñ–æ–Ω *
                  </label>
                  <input
                    type="tel"
                    id="phone"
                    value={bookingData.phone}
                    onChange={(e) => handleInputChange('phone', e.target.value)}
                    className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent ${
                      errors.phone ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="+7 (999) 123-45-67"
                    aria-describedby={errors.phone ? 'phone-error' : undefined}
                    aria-invalid={!!errors.phone}
                  />
                  {errors.phone && (
                    <p id="phone-error" className="text-red-500 text-xs mt-1" role="alert">
                      {errors.phone}
                    </p>
                  )}
                </div>

                {/* Occasion */}
                <div>
                  <label htmlFor="occasion" className="block text-sm font-medium text-gray-700 mb-1">
                    –ü–æ–≤–æ–¥ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                  </label>
                  <select
                    id="occasion"
                    value={bookingData.occasion}
                    onChange={(e) => handleInputChange('occasion', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–æ–¥</option>
                    <option value="birthday">–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</option>
                    <option value="anniversary">–ì–æ–¥–æ–≤—â–∏–Ω–∞</option>
                    <option value="business">–î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞</option>
                    <option value="date">–°–≤–∏–¥–∞–Ω–∏–µ</option>
                    <option value="celebration">–ü—Ä–∞–∑–¥–Ω–∏–∫</option>
                    <option value="other">–î—Ä—É–≥–æ–µ</option>
                  </select>
                </div>

                {/* Special Requests */}
                <div>
                  <label htmlFor="requests" className="block text-sm font-medium text-gray-700 mb-1">
                    –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                  </label>
                  <textarea
                    id="requests"
                    value={bookingData.requests}
                    onChange={(e) => handleInputChange('requests', e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    placeholder="–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
                  />
                </div>

                {/* Submit Button */}
                <button
                  type="button"
                  onClick={handleSubmit}
                  className="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-3 px-4 rounded-lg transition-colors focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
                >
                  –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫
                </button>
              </div>
              
              <p className="text-xs text-gray-500 mt-4">
                * –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-gray-800 text-white py-8 mt-12">
        <div className="container mx-auto px-4">
          <div className="grid md:grid-cols-3 gap-8">
            <div>
              <h4 className="text-lg font-semibold mb-4 flex items-center">
                <ChefHat className="w-5 h-5 mr-2 text-yellow-400" />
                Little Lemon
              </h4>
              <p className="text-gray-400 text-sm">
                –°–µ–º–µ–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫–æ–π –∫—É—Ö–Ω–∏ –≤ —Å–µ—Ä–¥—Ü–µ –ß–∏–∫–∞–≥–æ
              </p>
            </div>
            <div>
              <h4 className="text-lg font-semibold mb-4">–ö–æ–Ω—Ç–∞–∫—Ç—ã</h4>
              <div className="space-y-2 text-sm text-gray-400">
                <p className="flex items-center">
                  <MapPin className="w-4 h-4 mr-2" />
                  123 Main Street, Chicago, IL
                </p>
                <p className="flex items-center">
                  <Phone className="w-4 h-4 mr-2" />
                  +1 (555) 123-4567
                </p>
                <p className="flex items-center">
                  <Mail className="w-4 h-4 mr-2" />
                  info@littlelemon.com
                </p>
              </div>
            </div>
            <div>
              <h4 className="text-lg font-semibold mb-4">–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã</h4>
              <div className="space-y-1 text-sm text-gray-400">
                <p>–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ß–µ—Ç–≤–µ—Ä–≥: 17:00 - 23:00</p>
                <p>–ü—è—Ç–Ω–∏—Ü–∞ - –°—É–±–±–æ—Ç–∞: 17:00 - 24:00</p>
                <p>–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 17:00 - 22:00</p>
              </div>
            </div>
          </div>
          <div className="border-t border-gray-700 mt-8 pt-6 text-center text-sm text-gray-400">
            <p>&copy; 2025 Little Lemon Restaurant. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default LittleLemonApp;
